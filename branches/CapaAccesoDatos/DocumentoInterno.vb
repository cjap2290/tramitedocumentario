
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.3.0.3)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _DocumentoInterno
	Inherits SqlClientEntity

		Public Sub New() 
			Me.QuerySource = "DocumentoInterno"
			Me.MappingName = "DocumentoInterno"
		End Sub

	'=================================================================
	'  Public Overrides Sub AddNew()
	'=================================================================
	'
	'=================================================================
	Public Overrides Sub AddNew()
		MyBase.AddNew()
				
	End Sub
	
	Public Overrides Sub FlushData()
		Me._whereClause = nothing
		Me._aggregateClause = nothing		
		MyBase.FlushData()
	End Sub
	
		
	'=================================================================
	'  	Public Function LoadAll() As Boolean
	'=================================================================
	'  Loads all of the records in the database, and sets the currentRow to the first row
	'=================================================================
	Public Function LoadAll() As Boolean
	
		Dim parameters As ListDictionary = Nothing
		
		
    	Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_DocumentoInternoLoadAll]", parameters)
		
	End Function

	'=================================================================
	' Public Overridable Function LoadByPrimaryKey()  As Boolean
	'=================================================================
	'  Loads a single row of via the primary key
	'=================================================================
	Public Overridable Function LoadByPrimaryKey(ByVal IdDocInterno As Integer) As Boolean

		Dim parameters As ListDictionary = New ListDictionary()
		parameters.Add(_DocumentoInterno.Parameters.IdDocInterno, IdDocInterno)

		
		Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_DocumentoInternoLoadByPrimaryKey]", parameters)

	End Function

	#Region "Parameters"
	Protected class Parameters 
		
		Public Shared ReadOnly Property IdDocInterno As SqlParameter
			Get
				Return New SqlParameter("@IdDocInterno", SqlDbType.Int, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property NroDoc As SqlParameter
			Get
				Return New SqlParameter("@NroDoc", SqlDbType.Char, 6)
			End Get
		End Property
		
		Public Shared ReadOnly Property IdTipoDocumento As SqlParameter
			Get
				Return New SqlParameter("@IdTipoDocumento", SqlDbType.Int, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property IdArea As SqlParameter
			Get
				Return New SqlParameter("@IdArea", SqlDbType.Char, 2)
			End Get
		End Property
		
		Public Shared ReadOnly Property IdAgencia As SqlParameter
			Get
				Return New SqlParameter("@IdAgencia", SqlDbType.Char, 2)
			End Get
		End Property
		
		Public Shared ReadOnly Property Periodo As SqlParameter
			Get
				Return New SqlParameter("@Periodo", SqlDbType.Char, 6)
			End Get
		End Property
		
		Public Shared ReadOnly Property Asunto As SqlParameter
			Get
				Return New SqlParameter("@Asunto", SqlDbType.VarChar, 50)
			End Get
		End Property
		
		Public Shared ReadOnly Property Encabezado As SqlParameter
			Get
				Return New SqlParameter("@Encabezado", SqlDbType.VarChar, 30)
			End Get
		End Property
		
		Public Shared ReadOnly Property Prioridad As SqlParameter
			Get
				Return New SqlParameter("@Prioridad", SqlDbType.Char, 1)
			End Get
		End Property
		
		Public Shared ReadOnly Property NombreArchivo As SqlParameter
			Get
				Return New SqlParameter("@NombreArchivo", SqlDbType.VarChar, 30)
			End Get
		End Property
		
		Public Shared ReadOnly Property RutaArchivo As SqlParameter
			Get
				Return New SqlParameter("@RutaArchivo", SqlDbType.VarChar, 30)
			End Get
		End Property
		
		Public Shared ReadOnly Property FechaR As SqlParameter
			Get
				Return New SqlParameter("@FechaR", SqlDbType.DateTime, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property IdUserR As SqlParameter
			Get
				Return New SqlParameter("@IdUserR", SqlDbType.Char, 6)
			End Get
		End Property
		
		Public Shared ReadOnly Property IdEstDoc As SqlParameter
			Get
				Return New SqlParameter("@IdEstDoc", SqlDbType.Int, 0)
			End Get
		End Property
		
	End Class
	#End Region	

	#Region "ColumnNames"
	Public class ColumnNames
		
        Public Const IdDocInterno As String = "IdDocInterno"
        Public Const NroDoc As String = "NroDoc"
        Public Const IdTipoDocumento As String = "IdTipoDocumento"
        Public Const IdArea As String = "IdArea"
        Public Const IdAgencia As String = "IdAgencia"
        Public Const Periodo As String = "Periodo"
        Public Const Asunto As String = "Asunto"
        Public Const Encabezado As String = "Encabezado"
        Public Const Prioridad As String = "Prioridad"
        Public Const NombreArchivo As String = "NombreArchivo"
        Public Const RutaArchivo As String = "RutaArchivo"
        Public Const FechaR As String = "FechaR"
        Public Const IdUserR As String = "IdUserR"
        Public Const IdEstDoc As String = "IdEstDoc"

		Shared Public Function ToPropertyName(ByVal columnName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(IdDocInterno) = _DocumentoInterno.PropertyNames.IdDocInterno
				ht(NroDoc) = _DocumentoInterno.PropertyNames.NroDoc
				ht(IdTipoDocumento) = _DocumentoInterno.PropertyNames.IdTipoDocumento
				ht(IdArea) = _DocumentoInterno.PropertyNames.IdArea
				ht(IdAgencia) = _DocumentoInterno.PropertyNames.IdAgencia
				ht(Periodo) = _DocumentoInterno.PropertyNames.Periodo
				ht(Asunto) = _DocumentoInterno.PropertyNames.Asunto
				ht(Encabezado) = _DocumentoInterno.PropertyNames.Encabezado
				ht(Prioridad) = _DocumentoInterno.PropertyNames.Prioridad
				ht(NombreArchivo) = _DocumentoInterno.PropertyNames.NombreArchivo
				ht(RutaArchivo) = _DocumentoInterno.PropertyNames.RutaArchivo
				ht(FechaR) = _DocumentoInterno.PropertyNames.FechaR
				ht(IdUserR) = _DocumentoInterno.PropertyNames.IdUserR
				ht(IdEstDoc) = _DocumentoInterno.PropertyNames.IdEstDoc

			End If
			
			Return CType(ht(columnName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing		 
	End Class
	#End Region	
	
	#Region "PropertyNames"
	Public class PropertyNames
		
        Public Const IdDocInterno As String = "IdDocInterno"
        Public Const NroDoc As String = "NroDoc"
        Public Const IdTipoDocumento As String = "IdTipoDocumento"
        Public Const IdArea As String = "IdArea"
        Public Const IdAgencia As String = "IdAgencia"
        Public Const Periodo As String = "Periodo"
        Public Const Asunto As String = "Asunto"
        Public Const Encabezado As String = "Encabezado"
        Public Const Prioridad As String = "Prioridad"
        Public Const NombreArchivo As String = "NombreArchivo"
        Public Const RutaArchivo As String = "RutaArchivo"
        Public Const FechaR As String = "FechaR"
        Public Const IdUserR As String = "IdUserR"
        Public Const IdEstDoc As String = "IdEstDoc"

		Shared Public Function ToColumnName(ByVal propertyName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(IdDocInterno) = _DocumentoInterno.ColumnNames.IdDocInterno
				ht(NroDoc) = _DocumentoInterno.ColumnNames.NroDoc
				ht(IdTipoDocumento) = _DocumentoInterno.ColumnNames.IdTipoDocumento
				ht(IdArea) = _DocumentoInterno.ColumnNames.IdArea
				ht(IdAgencia) = _DocumentoInterno.ColumnNames.IdAgencia
				ht(Periodo) = _DocumentoInterno.ColumnNames.Periodo
				ht(Asunto) = _DocumentoInterno.ColumnNames.Asunto
				ht(Encabezado) = _DocumentoInterno.ColumnNames.Encabezado
				ht(Prioridad) = _DocumentoInterno.ColumnNames.Prioridad
				ht(NombreArchivo) = _DocumentoInterno.ColumnNames.NombreArchivo
				ht(RutaArchivo) = _DocumentoInterno.ColumnNames.RutaArchivo
				ht(FechaR) = _DocumentoInterno.ColumnNames.FechaR
				ht(IdUserR) = _DocumentoInterno.ColumnNames.IdUserR
				ht(IdEstDoc) = _DocumentoInterno.ColumnNames.IdEstDoc

			End If
			
			Return CType(ht(propertyName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing
		
	End Class
	#End Region	
	
	#Region "StringPropertyNames"
	Public class StringPropertyNames
		
        Public Const IdDocInterno As String = "s_IdDocInterno"
        Public Const NroDoc As String = "s_NroDoc"
        Public Const IdTipoDocumento As String = "s_IdTipoDocumento"
        Public Const IdArea As String = "s_IdArea"
        Public Const IdAgencia As String = "s_IdAgencia"
        Public Const Periodo As String = "s_Periodo"
        Public Const Asunto As String = "s_Asunto"
        Public Const Encabezado As String = "s_Encabezado"
        Public Const Prioridad As String = "s_Prioridad"
        Public Const NombreArchivo As String = "s_NombreArchivo"
        Public Const RutaArchivo As String = "s_RutaArchivo"
        Public Const FechaR As String = "s_FechaR"
        Public Const IdUserR As String = "s_IdUserR"
        Public Const IdEstDoc As String = "s_IdEstDoc"

	End Class
	#End Region		
	
	#Region "Properties" 
		Public Overridable Property IdDocInterno As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.IdDocInterno)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.IdDocInterno, Value)
			End Set
		End Property

		Public Overridable Property NroDoc As String
			Get
				Return MyBase.GetString(ColumnNames.NroDoc)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.NroDoc, Value)
			End Set
		End Property

		Public Overridable Property IdTipoDocumento As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.IdTipoDocumento)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.IdTipoDocumento, Value)
			End Set
		End Property

		Public Overridable Property IdArea As String
			Get
				Return MyBase.GetString(ColumnNames.IdArea)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.IdArea, Value)
			End Set
		End Property

		Public Overridable Property IdAgencia As String
			Get
				Return MyBase.GetString(ColumnNames.IdAgencia)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.IdAgencia, Value)
			End Set
		End Property

		Public Overridable Property Periodo As String
			Get
				Return MyBase.GetString(ColumnNames.Periodo)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Periodo, Value)
			End Set
		End Property

		Public Overridable Property Asunto As String
			Get
				Return MyBase.GetString(ColumnNames.Asunto)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Asunto, Value)
			End Set
		End Property

		Public Overridable Property Encabezado As String
			Get
				Return MyBase.GetString(ColumnNames.Encabezado)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Encabezado, Value)
			End Set
		End Property

		Public Overridable Property Prioridad As String
			Get
				Return MyBase.GetString(ColumnNames.Prioridad)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Prioridad, Value)
			End Set
		End Property

		Public Overridable Property NombreArchivo As String
			Get
				Return MyBase.GetString(ColumnNames.NombreArchivo)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.NombreArchivo, Value)
			End Set
		End Property

		Public Overridable Property RutaArchivo As String
			Get
				Return MyBase.GetString(ColumnNames.RutaArchivo)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.RutaArchivo, Value)
			End Set
		End Property

		Public Overridable Property FechaR As DateTime
			Get
				Return MyBase.GetDateTime(ColumnNames.FechaR)
			End Get
			Set(ByVal Value As DateTime)
				MyBase.SetDateTime(ColumnNames.FechaR, Value)
			End Set
		End Property

		Public Overridable Property IdUserR As String
			Get
				Return MyBase.GetString(ColumnNames.IdUserR)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.IdUserR, Value)
			End Set
		End Property

		Public Overridable Property IdEstDoc As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.IdEstDoc)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.IdEstDoc, Value)
			End Set
		End Property


	#End Region  
	
	#Region "String Properties" 

		Public Overridable Property s_IdDocInterno As String
			Get
				If Me.IsColumnNull(ColumnNames.IdDocInterno) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.IdDocInterno)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.IdDocInterno)
				Else
					Me.IdDocInterno = MyBase.SetIntegerAsString(ColumnNames.IdDocInterno, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_NroDoc As String
			Get
				If Me.IsColumnNull(ColumnNames.NroDoc) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.NroDoc)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.NroDoc)
				Else
					Me.NroDoc = MyBase.SetStringAsString(ColumnNames.NroDoc, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_IdTipoDocumento As String
			Get
				If Me.IsColumnNull(ColumnNames.IdTipoDocumento) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.IdTipoDocumento)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.IdTipoDocumento)
				Else
					Me.IdTipoDocumento = MyBase.SetIntegerAsString(ColumnNames.IdTipoDocumento, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_IdArea As String
			Get
				If Me.IsColumnNull(ColumnNames.IdArea) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.IdArea)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.IdArea)
				Else
					Me.IdArea = MyBase.SetStringAsString(ColumnNames.IdArea, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_IdAgencia As String
			Get
				If Me.IsColumnNull(ColumnNames.IdAgencia) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.IdAgencia)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.IdAgencia)
				Else
					Me.IdAgencia = MyBase.SetStringAsString(ColumnNames.IdAgencia, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Periodo As String
			Get
				If Me.IsColumnNull(ColumnNames.Periodo) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Periodo)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Periodo)
				Else
					Me.Periodo = MyBase.SetStringAsString(ColumnNames.Periodo, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Asunto As String
			Get
				If Me.IsColumnNull(ColumnNames.Asunto) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Asunto)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Asunto)
				Else
					Me.Asunto = MyBase.SetStringAsString(ColumnNames.Asunto, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Encabezado As String
			Get
				If Me.IsColumnNull(ColumnNames.Encabezado) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Encabezado)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Encabezado)
				Else
					Me.Encabezado = MyBase.SetStringAsString(ColumnNames.Encabezado, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Prioridad As String
			Get
				If Me.IsColumnNull(ColumnNames.Prioridad) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Prioridad)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Prioridad)
				Else
					Me.Prioridad = MyBase.SetStringAsString(ColumnNames.Prioridad, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_NombreArchivo As String
			Get
				If Me.IsColumnNull(ColumnNames.NombreArchivo) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.NombreArchivo)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.NombreArchivo)
				Else
					Me.NombreArchivo = MyBase.SetStringAsString(ColumnNames.NombreArchivo, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_RutaArchivo As String
			Get
				If Me.IsColumnNull(ColumnNames.RutaArchivo) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.RutaArchivo)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.RutaArchivo)
				Else
					Me.RutaArchivo = MyBase.SetStringAsString(ColumnNames.RutaArchivo, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_FechaR As String
			Get
				If Me.IsColumnNull(ColumnNames.FechaR) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(ColumnNames.FechaR)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.FechaR)
				Else
					Me.FechaR = MyBase.SetDateTimeAsString(ColumnNames.FechaR, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_IdUserR As String
			Get
				If Me.IsColumnNull(ColumnNames.IdUserR) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.IdUserR)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.IdUserR)
				Else
					Me.IdUserR = MyBase.SetStringAsString(ColumnNames.IdUserR, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_IdEstDoc As String
			Get
				If Me.IsColumnNull(ColumnNames.IdEstDoc) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.IdEstDoc)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.IdEstDoc)
				Else
					Me.IdEstDoc = MyBase.SetIntegerAsString(ColumnNames.IdEstDoc, Value)
				End If
			End Set
		End Property


	#End Region  	

	#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "TearOff's"
		Public class TearOffWhereParameter

			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub
		
	
			Public ReadOnly Property IdDocInterno() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.IdDocInterno, Parameters.IdDocInterno)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property NroDoc() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.NroDoc, Parameters.NroDoc)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property IdTipoDocumento() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.IdTipoDocumento, Parameters.IdTipoDocumento)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property IdArea() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.IdArea, Parameters.IdArea)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property IdAgencia() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.IdAgencia, Parameters.IdAgencia)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Periodo() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Periodo, Parameters.Periodo)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Asunto() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Asunto, Parameters.Asunto)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Encabezado() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Encabezado, Parameters.Encabezado)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Prioridad() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Prioridad, Parameters.Prioridad)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property NombreArchivo() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.NombreArchivo, Parameters.NombreArchivo)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property RutaArchivo() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.RutaArchivo, Parameters.RutaArchivo)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property FechaR() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.FechaR, Parameters.FechaR)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property IdUserR() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.IdUserR, Parameters.IdUserR)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property IdEstDoc() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.IdEstDoc, Parameters.IdEstDoc)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property


			Private _clause as WhereClause
		End Class
		#End Region	

		Public ReadOnly Property IdDocInterno() As WhereParameter 
			Get
				If _IdDocInterno_W Is Nothing Then
					_IdDocInterno_W = TearOff.IdDocInterno
				End If
				Return _IdDocInterno_W
			End Get
		End Property

		Public ReadOnly Property NroDoc() As WhereParameter 
			Get
				If _NroDoc_W Is Nothing Then
					_NroDoc_W = TearOff.NroDoc
				End If
				Return _NroDoc_W
			End Get
		End Property

		Public ReadOnly Property IdTipoDocumento() As WhereParameter 
			Get
				If _IdTipoDocumento_W Is Nothing Then
					_IdTipoDocumento_W = TearOff.IdTipoDocumento
				End If
				Return _IdTipoDocumento_W
			End Get
		End Property

		Public ReadOnly Property IdArea() As WhereParameter 
			Get
				If _IdArea_W Is Nothing Then
					_IdArea_W = TearOff.IdArea
				End If
				Return _IdArea_W
			End Get
		End Property

		Public ReadOnly Property IdAgencia() As WhereParameter 
			Get
				If _IdAgencia_W Is Nothing Then
					_IdAgencia_W = TearOff.IdAgencia
				End If
				Return _IdAgencia_W
			End Get
		End Property

		Public ReadOnly Property Periodo() As WhereParameter 
			Get
				If _Periodo_W Is Nothing Then
					_Periodo_W = TearOff.Periodo
				End If
				Return _Periodo_W
			End Get
		End Property

		Public ReadOnly Property Asunto() As WhereParameter 
			Get
				If _Asunto_W Is Nothing Then
					_Asunto_W = TearOff.Asunto
				End If
				Return _Asunto_W
			End Get
		End Property

		Public ReadOnly Property Encabezado() As WhereParameter 
			Get
				If _Encabezado_W Is Nothing Then
					_Encabezado_W = TearOff.Encabezado
				End If
				Return _Encabezado_W
			End Get
		End Property

		Public ReadOnly Property Prioridad() As WhereParameter 
			Get
				If _Prioridad_W Is Nothing Then
					_Prioridad_W = TearOff.Prioridad
				End If
				Return _Prioridad_W
			End Get
		End Property

		Public ReadOnly Property NombreArchivo() As WhereParameter 
			Get
				If _NombreArchivo_W Is Nothing Then
					_NombreArchivo_W = TearOff.NombreArchivo
				End If
				Return _NombreArchivo_W
			End Get
		End Property

		Public ReadOnly Property RutaArchivo() As WhereParameter 
			Get
				If _RutaArchivo_W Is Nothing Then
					_RutaArchivo_W = TearOff.RutaArchivo
				End If
				Return _RutaArchivo_W
			End Get
		End Property

		Public ReadOnly Property FechaR() As WhereParameter 
			Get
				If _FechaR_W Is Nothing Then
					_FechaR_W = TearOff.FechaR
				End If
				Return _FechaR_W
			End Get
		End Property

		Public ReadOnly Property IdUserR() As WhereParameter 
			Get
				If _IdUserR_W Is Nothing Then
					_IdUserR_W = TearOff.IdUserR
				End If
				Return _IdUserR_W
			End Get
		End Property

		Public ReadOnly Property IdEstDoc() As WhereParameter 
			Get
				If _IdEstDoc_W Is Nothing Then
					_IdEstDoc_W = TearOff.IdEstDoc
				End If
				Return _IdEstDoc_W
			End Get
		End Property

		Private _IdDocInterno_W As WhereParameter = Nothing
		Private _NroDoc_W As WhereParameter = Nothing
		Private _IdTipoDocumento_W As WhereParameter = Nothing
		Private _IdArea_W As WhereParameter = Nothing
		Private _IdAgencia_W As WhereParameter = Nothing
		Private _Periodo_W As WhereParameter = Nothing
		Private _Asunto_W As WhereParameter = Nothing
		Private _Encabezado_W As WhereParameter = Nothing
		Private _Prioridad_W As WhereParameter = Nothing
		Private _NombreArchivo_W As WhereParameter = Nothing
		Private _RutaArchivo_W As WhereParameter = Nothing
		Private _FechaR_W As WhereParameter = Nothing
		Private _IdUserR_W As WhereParameter = Nothing
		Private _IdEstDoc_W As WhereParameter = Nothing

			Public Sub WhereClauseReset()

			_IdDocInterno_W = Nothing
			_NroDoc_W = Nothing
			_IdTipoDocumento_W = Nothing
			_IdArea_W = Nothing
			_IdAgencia_W = Nothing
			_Periodo_W = Nothing
			_Asunto_W = Nothing
			_Encabezado_W = Nothing
			_Prioridad_W = Nothing
			_NombreArchivo_W = Nothing
			_RutaArchivo_W = Nothing
			_FechaR_W = Nothing
			_IdUserR_W = Nothing
			_IdEstDoc_W = Nothing
				Me._entity.Query.FlushWhereParameters()

			End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "AggregateParameter TearOff's"
		Public class TearOffAggregateParameter

			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub
		
	
		Public ReadOnly Property IdDocInterno() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.IdDocInterno, Parameters.IdDocInterno)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property NroDoc() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.NroDoc, Parameters.NroDoc)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property IdTipoDocumento() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.IdTipoDocumento, Parameters.IdTipoDocumento)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property IdArea() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.IdArea, Parameters.IdArea)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property IdAgencia() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.IdAgencia, Parameters.IdAgencia)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Periodo() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Periodo, Parameters.Periodo)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Asunto() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Asunto, Parameters.Asunto)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Encabezado() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Encabezado, Parameters.Encabezado)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Prioridad() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Prioridad, Parameters.Prioridad)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property NombreArchivo() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.NombreArchivo, Parameters.NombreArchivo)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property RutaArchivo() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.RutaArchivo, Parameters.RutaArchivo)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property FechaR() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.FechaR, Parameters.FechaR)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property IdUserR() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.IdUserR, Parameters.IdUserR)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property IdEstDoc() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.IdEstDoc, Parameters.IdEstDoc)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property


			Private _clause as AggregateClause
		End Class
		#End Region	

		Public ReadOnly Property IdDocInterno() As AggregateParameter 
			Get
				If _IdDocInterno_W Is Nothing Then
					_IdDocInterno_W = TearOff.IdDocInterno
				End If
				Return _IdDocInterno_W
			End Get
		End Property

		Public ReadOnly Property NroDoc() As AggregateParameter 
			Get
				If _NroDoc_W Is Nothing Then
					_NroDoc_W = TearOff.NroDoc
				End If
				Return _NroDoc_W
			End Get
		End Property

		Public ReadOnly Property IdTipoDocumento() As AggregateParameter 
			Get
				If _IdTipoDocumento_W Is Nothing Then
					_IdTipoDocumento_W = TearOff.IdTipoDocumento
				End If
				Return _IdTipoDocumento_W
			End Get
		End Property

		Public ReadOnly Property IdArea() As AggregateParameter 
			Get
				If _IdArea_W Is Nothing Then
					_IdArea_W = TearOff.IdArea
				End If
				Return _IdArea_W
			End Get
		End Property

		Public ReadOnly Property IdAgencia() As AggregateParameter 
			Get
				If _IdAgencia_W Is Nothing Then
					_IdAgencia_W = TearOff.IdAgencia
				End If
				Return _IdAgencia_W
			End Get
		End Property

		Public ReadOnly Property Periodo() As AggregateParameter 
			Get
				If _Periodo_W Is Nothing Then
					_Periodo_W = TearOff.Periodo
				End If
				Return _Periodo_W
			End Get
		End Property

		Public ReadOnly Property Asunto() As AggregateParameter 
			Get
				If _Asunto_W Is Nothing Then
					_Asunto_W = TearOff.Asunto
				End If
				Return _Asunto_W
			End Get
		End Property

		Public ReadOnly Property Encabezado() As AggregateParameter 
			Get
				If _Encabezado_W Is Nothing Then
					_Encabezado_W = TearOff.Encabezado
				End If
				Return _Encabezado_W
			End Get
		End Property

		Public ReadOnly Property Prioridad() As AggregateParameter 
			Get
				If _Prioridad_W Is Nothing Then
					_Prioridad_W = TearOff.Prioridad
				End If
				Return _Prioridad_W
			End Get
		End Property

		Public ReadOnly Property NombreArchivo() As AggregateParameter 
			Get
				If _NombreArchivo_W Is Nothing Then
					_NombreArchivo_W = TearOff.NombreArchivo
				End If
				Return _NombreArchivo_W
			End Get
		End Property

		Public ReadOnly Property RutaArchivo() As AggregateParameter 
			Get
				If _RutaArchivo_W Is Nothing Then
					_RutaArchivo_W = TearOff.RutaArchivo
				End If
				Return _RutaArchivo_W
			End Get
		End Property

		Public ReadOnly Property FechaR() As AggregateParameter 
			Get
				If _FechaR_W Is Nothing Then
					_FechaR_W = TearOff.FechaR
				End If
				Return _FechaR_W
			End Get
		End Property

		Public ReadOnly Property IdUserR() As AggregateParameter 
			Get
				If _IdUserR_W Is Nothing Then
					_IdUserR_W = TearOff.IdUserR
				End If
				Return _IdUserR_W
			End Get
		End Property

		Public ReadOnly Property IdEstDoc() As AggregateParameter 
			Get
				If _IdEstDoc_W Is Nothing Then
					_IdEstDoc_W = TearOff.IdEstDoc
				End If
				Return _IdEstDoc_W
			End Get
		End Property

		Private _IdDocInterno_W As AggregateParameter = Nothing
		Private _NroDoc_W As AggregateParameter = Nothing
		Private _IdTipoDocumento_W As AggregateParameter = Nothing
		Private _IdArea_W As AggregateParameter = Nothing
		Private _IdAgencia_W As AggregateParameter = Nothing
		Private _Periodo_W As AggregateParameter = Nothing
		Private _Asunto_W As AggregateParameter = Nothing
		Private _Encabezado_W As AggregateParameter = Nothing
		Private _Prioridad_W As AggregateParameter = Nothing
		Private _NombreArchivo_W As AggregateParameter = Nothing
		Private _RutaArchivo_W As AggregateParameter = Nothing
		Private _FechaR_W As AggregateParameter = Nothing
		Private _IdUserR_W As AggregateParameter = Nothing
		Private _IdEstDoc_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_IdDocInterno_W = Nothing
		_NroDoc_W = Nothing
		_IdTipoDocumento_W = Nothing
		_IdArea_W = Nothing
		_IdAgencia_W = Nothing
		_Periodo_W = Nothing
		_Asunto_W = Nothing
		_Encabezado_W = Nothing
		_Prioridad_W = Nothing
		_NombreArchivo_W = Nothing
		_RutaArchivo_W = Nothing
		_FechaR_W = Nothing
		_IdUserR_W = Nothing
		_IdEstDoc_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

	Protected Overrides Function GetInsertCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_DocumentoInternoInsert]" 
	    
		CreateParameters(cmd)
		
		Dim p As SqlParameter
		p = cmd.Parameters(Parameters.IdDocInterno.ParameterName)
		p.Direction = ParameterDirection.Output
    
		Return cmd 

  	End Function
	
	Protected Overrides Function GetUpdateCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_DocumentoInternoUpdate]" 
		
		CreateParameters(cmd) 
		    
		Return cmd
	
	End Function	
	
	Protected Overrides Function GetDeleteCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_DocumentoInternoDelete]" 
		
		Dim p As SqlParameter
		p = cmd.Parameters.Add(Parameters.IdDocInterno)
		p.SourceColumn = ColumnNames.IdDocInterno
		p.SourceVersion = DataRowVersion.Current

  
		Return cmd
	
	End Function	
	
	Private Sub CreateParameters(ByVal cmd As SqlCommand)
	
		Dim p As SqlParameter
		p = cmd.Parameters.Add(Parameters.IdDocInterno)
		p.SourceColumn = ColumnNames.IdDocInterno
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.NroDoc)
		p.SourceColumn = ColumnNames.NroDoc
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.IdTipoDocumento)
		p.SourceColumn = ColumnNames.IdTipoDocumento
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.IdArea)
		p.SourceColumn = ColumnNames.IdArea
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.IdAgencia)
		p.SourceColumn = ColumnNames.IdAgencia
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Periodo)
		p.SourceColumn = ColumnNames.Periodo
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Asunto)
		p.SourceColumn = ColumnNames.Asunto
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Encabezado)
		p.SourceColumn = ColumnNames.Encabezado
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Prioridad)
		p.SourceColumn = ColumnNames.Prioridad
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.NombreArchivo)
		p.SourceColumn = ColumnNames.NombreArchivo
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.RutaArchivo)
		p.SourceColumn = ColumnNames.RutaArchivo
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.FechaR)
		p.SourceColumn = ColumnNames.FechaR
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.IdUserR)
		p.SourceColumn = ColumnNames.IdUserR
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.IdEstDoc)
		p.SourceColumn = ColumnNames.IdEstDoc
		p.SourceVersion = DataRowVersion.Current


	End Sub	

End Class

