
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.3.0.3)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _Agencias
	Inherits SqlClientEntity

		Public Sub New() 
			Me.QuerySource = "Agencias"
			Me.MappingName = "Agencias"
		End Sub

	'=================================================================
	'  Public Overrides Sub AddNew()
	'=================================================================
	'
	'=================================================================
	Public Overrides Sub AddNew()
		MyBase.AddNew()
				
	End Sub
	
	Public Overrides Sub FlushData()
		Me._whereClause = nothing
		Me._aggregateClause = nothing		
		MyBase.FlushData()
	End Sub
	
		
	'=================================================================
	'  	Public Function LoadAll() As Boolean
	'=================================================================
	'  Loads all of the records in the database, and sets the currentRow to the first row
	'=================================================================
	Public Function LoadAll() As Boolean
	
		Dim parameters As ListDictionary = Nothing
		
		
    	Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_AgenciasLoadAll]", parameters)
		
	End Function

	'=================================================================
	' Public Overridable Function LoadByPrimaryKey()  As Boolean
	'=================================================================
	'  Loads a single row of via the primary key
	'=================================================================
	Public Overridable Function LoadByPrimaryKey(ByVal Idagencia As String) As Boolean

		Dim parameters As ListDictionary = New ListDictionary()
		parameters.Add(_Agencias.Parameters.Idagencia, Idagencia)

		
		Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_AgenciasLoadByPrimaryKey]", parameters)

	End Function

	#Region "Parameters"
	Protected class Parameters 
		
		Public Shared ReadOnly Property Idagencia As SqlParameter
			Get
				Return New SqlParameter("@Idagencia", SqlDbType.Char, 2)
			End Get
		End Property
		
		Public Shared ReadOnly Property Agencia As SqlParameter
			Get
				Return New SqlParameter("@Agencia", SqlDbType.VarChar, 50)
			End Get
		End Property
		
		Public Shared ReadOnly Property Fechape As SqlParameter
			Get
				Return New SqlParameter("@Fechape", SqlDbType.DateTime, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Direccion As SqlParameter
			Get
				Return New SqlParameter("@Direccion", SqlDbType.VarChar, 60)
			End Get
		End Property
		
		Public Shared ReadOnly Property Fecpro As SqlParameter
			Get
				Return New SqlParameter("@Fecpro", SqlDbType.DateTime, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Iduser As SqlParameter
			Get
				Return New SqlParameter("@Iduser", SqlDbType.Char, 6)
			End Get
		End Property
		
		Public Shared ReadOnly Property Hora As SqlParameter
			Get
				Return New SqlParameter("@Hora", SqlDbType.Char, 8)
			End Get
		End Property
		
		Public Shared ReadOnly Property Abrev As SqlParameter
			Get
				Return New SqlParameter("@Abrev", SqlDbType.Char, 4)
			End Get
		End Property
		
	End Class
	#End Region	

	#Region "ColumnNames"
	Public class ColumnNames
		
        Public Const Idagencia As String = "Idagencia"
        Public Const Agencia As String = "Agencia"
        Public Const Fechape As String = "Fechape"
        Public Const Direccion As String = "Direccion"
        Public Const Fecpro As String = "Fecpro"
        Public Const Iduser As String = "Iduser"
        Public Const Hora As String = "Hora"
        Public Const Abrev As String = "Abrev"

		Shared Public Function ToPropertyName(ByVal columnName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(Idagencia) = _Agencias.PropertyNames.Idagencia
				ht(Agencia) = _Agencias.PropertyNames.Agencia
				ht(Fechape) = _Agencias.PropertyNames.Fechape
				ht(Direccion) = _Agencias.PropertyNames.Direccion
				ht(Fecpro) = _Agencias.PropertyNames.Fecpro
				ht(Iduser) = _Agencias.PropertyNames.Iduser
				ht(Hora) = _Agencias.PropertyNames.Hora
				ht(Abrev) = _Agencias.PropertyNames.Abrev

			End If
			
			Return CType(ht(columnName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing		 
	End Class
	#End Region	
	
	#Region "PropertyNames"
	Public class PropertyNames
		
        Public Const Idagencia As String = "Idagencia"
        Public Const Agencia As String = "Agencia"
        Public Const Fechape As String = "Fechape"
        Public Const Direccion As String = "Direccion"
        Public Const Fecpro As String = "Fecpro"
        Public Const Iduser As String = "Iduser"
        Public Const Hora As String = "Hora"
        Public Const Abrev As String = "Abrev"

		Shared Public Function ToColumnName(ByVal propertyName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(Idagencia) = _Agencias.ColumnNames.Idagencia
				ht(Agencia) = _Agencias.ColumnNames.Agencia
				ht(Fechape) = _Agencias.ColumnNames.Fechape
				ht(Direccion) = _Agencias.ColumnNames.Direccion
				ht(Fecpro) = _Agencias.ColumnNames.Fecpro
				ht(Iduser) = _Agencias.ColumnNames.Iduser
				ht(Hora) = _Agencias.ColumnNames.Hora
				ht(Abrev) = _Agencias.ColumnNames.Abrev

			End If
			
			Return CType(ht(propertyName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing
		
	End Class
	#End Region	
	
	#Region "StringPropertyNames"
	Public class StringPropertyNames
		
        Public Const Idagencia As String = "s_Idagencia"
        Public Const Agencia As String = "s_Agencia"
        Public Const Fechape As String = "s_Fechape"
        Public Const Direccion As String = "s_Direccion"
        Public Const Fecpro As String = "s_Fecpro"
        Public Const Iduser As String = "s_Iduser"
        Public Const Hora As String = "s_Hora"
        Public Const Abrev As String = "s_Abrev"

	End Class
	#End Region		
	
	#Region "Properties" 
		Public Overridable Property Idagencia As String
			Get
				Return MyBase.GetString(ColumnNames.Idagencia)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Idagencia, Value)
			End Set
		End Property

		Public Overridable Property Agencia As String
			Get
				Return MyBase.GetString(ColumnNames.Agencia)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Agencia, Value)
			End Set
		End Property

		Public Overridable Property Fechape As DateTime
			Get
				Return MyBase.GetDateTime(ColumnNames.Fechape)
			End Get
			Set(ByVal Value As DateTime)
				MyBase.SetDateTime(ColumnNames.Fechape, Value)
			End Set
		End Property

		Public Overridable Property Direccion As String
			Get
				Return MyBase.GetString(ColumnNames.Direccion)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Direccion, Value)
			End Set
		End Property

		Public Overridable Property Fecpro As DateTime
			Get
				Return MyBase.GetDateTime(ColumnNames.Fecpro)
			End Get
			Set(ByVal Value As DateTime)
				MyBase.SetDateTime(ColumnNames.Fecpro, Value)
			End Set
		End Property

		Public Overridable Property Iduser As String
			Get
				Return MyBase.GetString(ColumnNames.Iduser)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Iduser, Value)
			End Set
		End Property

		Public Overridable Property Hora As String
			Get
				Return MyBase.GetString(ColumnNames.Hora)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Hora, Value)
			End Set
		End Property

		Public Overridable Property Abrev As String
			Get
				Return MyBase.GetString(ColumnNames.Abrev)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Abrev, Value)
			End Set
		End Property


	#End Region  
	
	#Region "String Properties" 

		Public Overridable Property s_Idagencia As String
			Get
				If Me.IsColumnNull(ColumnNames.Idagencia) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Idagencia)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Idagencia)
				Else
					Me.Idagencia = MyBase.SetStringAsString(ColumnNames.Idagencia, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Agencia As String
			Get
				If Me.IsColumnNull(ColumnNames.Agencia) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Agencia)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Agencia)
				Else
					Me.Agencia = MyBase.SetStringAsString(ColumnNames.Agencia, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Fechape As String
			Get
				If Me.IsColumnNull(ColumnNames.Fechape) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(ColumnNames.Fechape)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Fechape)
				Else
					Me.Fechape = MyBase.SetDateTimeAsString(ColumnNames.Fechape, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Direccion As String
			Get
				If Me.IsColumnNull(ColumnNames.Direccion) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Direccion)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Direccion)
				Else
					Me.Direccion = MyBase.SetStringAsString(ColumnNames.Direccion, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Fecpro As String
			Get
				If Me.IsColumnNull(ColumnNames.Fecpro) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(ColumnNames.Fecpro)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Fecpro)
				Else
					Me.Fecpro = MyBase.SetDateTimeAsString(ColumnNames.Fecpro, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Iduser As String
			Get
				If Me.IsColumnNull(ColumnNames.Iduser) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Iduser)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Iduser)
				Else
					Me.Iduser = MyBase.SetStringAsString(ColumnNames.Iduser, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Hora As String
			Get
				If Me.IsColumnNull(ColumnNames.Hora) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Hora)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Hora)
				Else
					Me.Hora = MyBase.SetStringAsString(ColumnNames.Hora, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Abrev As String
			Get
				If Me.IsColumnNull(ColumnNames.Abrev) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Abrev)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Abrev)
				Else
					Me.Abrev = MyBase.SetStringAsString(ColumnNames.Abrev, Value)
				End If
			End Set
		End Property


	#End Region  	

	#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "TearOff's"
		Public class TearOffWhereParameter

			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub
		
	
			Public ReadOnly Property Idagencia() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Idagencia, Parameters.Idagencia)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Agencia() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Agencia, Parameters.Agencia)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Fechape() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Fechape, Parameters.Fechape)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Direccion() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Direccion, Parameters.Direccion)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Fecpro() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Fecpro, Parameters.Fecpro)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Iduser() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Iduser, Parameters.Iduser)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Hora() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Hora, Parameters.Hora)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Abrev() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Abrev, Parameters.Abrev)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property


			Private _clause as WhereClause
		End Class
		#End Region	

		Public ReadOnly Property Idagencia() As WhereParameter 
			Get
				If _Idagencia_W Is Nothing Then
					_Idagencia_W = TearOff.Idagencia
				End If
				Return _Idagencia_W
			End Get
		End Property

		Public ReadOnly Property Agencia() As WhereParameter 
			Get
				If _Agencia_W Is Nothing Then
					_Agencia_W = TearOff.Agencia
				End If
				Return _Agencia_W
			End Get
		End Property

		Public ReadOnly Property Fechape() As WhereParameter 
			Get
				If _Fechape_W Is Nothing Then
					_Fechape_W = TearOff.Fechape
				End If
				Return _Fechape_W
			End Get
		End Property

		Public ReadOnly Property Direccion() As WhereParameter 
			Get
				If _Direccion_W Is Nothing Then
					_Direccion_W = TearOff.Direccion
				End If
				Return _Direccion_W
			End Get
		End Property

		Public ReadOnly Property Fecpro() As WhereParameter 
			Get
				If _Fecpro_W Is Nothing Then
					_Fecpro_W = TearOff.Fecpro
				End If
				Return _Fecpro_W
			End Get
		End Property

		Public ReadOnly Property Iduser() As WhereParameter 
			Get
				If _Iduser_W Is Nothing Then
					_Iduser_W = TearOff.Iduser
				End If
				Return _Iduser_W
			End Get
		End Property

		Public ReadOnly Property Hora() As WhereParameter 
			Get
				If _Hora_W Is Nothing Then
					_Hora_W = TearOff.Hora
				End If
				Return _Hora_W
			End Get
		End Property

		Public ReadOnly Property Abrev() As WhereParameter 
			Get
				If _Abrev_W Is Nothing Then
					_Abrev_W = TearOff.Abrev
				End If
				Return _Abrev_W
			End Get
		End Property

		Private _Idagencia_W As WhereParameter = Nothing
		Private _Agencia_W As WhereParameter = Nothing
		Private _Fechape_W As WhereParameter = Nothing
		Private _Direccion_W As WhereParameter = Nothing
		Private _Fecpro_W As WhereParameter = Nothing
		Private _Iduser_W As WhereParameter = Nothing
		Private _Hora_W As WhereParameter = Nothing
		Private _Abrev_W As WhereParameter = Nothing

			Public Sub WhereClauseReset()

			_Idagencia_W = Nothing
			_Agencia_W = Nothing
			_Fechape_W = Nothing
			_Direccion_W = Nothing
			_Fecpro_W = Nothing
			_Iduser_W = Nothing
			_Hora_W = Nothing
			_Abrev_W = Nothing
				Me._entity.Query.FlushWhereParameters()

			End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "AggregateParameter TearOff's"
		Public class TearOffAggregateParameter

			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub
		
	
		Public ReadOnly Property Idagencia() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Idagencia, Parameters.Idagencia)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Agencia() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Agencia, Parameters.Agencia)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Fechape() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Fechape, Parameters.Fechape)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Direccion() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Direccion, Parameters.Direccion)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Fecpro() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Fecpro, Parameters.Fecpro)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Iduser() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Iduser, Parameters.Iduser)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Hora() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Hora, Parameters.Hora)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Abrev() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Abrev, Parameters.Abrev)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property


			Private _clause as AggregateClause
		End Class
		#End Region	

		Public ReadOnly Property Idagencia() As AggregateParameter 
			Get
				If _Idagencia_W Is Nothing Then
					_Idagencia_W = TearOff.Idagencia
				End If
				Return _Idagencia_W
			End Get
		End Property

		Public ReadOnly Property Agencia() As AggregateParameter 
			Get
				If _Agencia_W Is Nothing Then
					_Agencia_W = TearOff.Agencia
				End If
				Return _Agencia_W
			End Get
		End Property

		Public ReadOnly Property Fechape() As AggregateParameter 
			Get
				If _Fechape_W Is Nothing Then
					_Fechape_W = TearOff.Fechape
				End If
				Return _Fechape_W
			End Get
		End Property

		Public ReadOnly Property Direccion() As AggregateParameter 
			Get
				If _Direccion_W Is Nothing Then
					_Direccion_W = TearOff.Direccion
				End If
				Return _Direccion_W
			End Get
		End Property

		Public ReadOnly Property Fecpro() As AggregateParameter 
			Get
				If _Fecpro_W Is Nothing Then
					_Fecpro_W = TearOff.Fecpro
				End If
				Return _Fecpro_W
			End Get
		End Property

		Public ReadOnly Property Iduser() As AggregateParameter 
			Get
				If _Iduser_W Is Nothing Then
					_Iduser_W = TearOff.Iduser
				End If
				Return _Iduser_W
			End Get
		End Property

		Public ReadOnly Property Hora() As AggregateParameter 
			Get
				If _Hora_W Is Nothing Then
					_Hora_W = TearOff.Hora
				End If
				Return _Hora_W
			End Get
		End Property

		Public ReadOnly Property Abrev() As AggregateParameter 
			Get
				If _Abrev_W Is Nothing Then
					_Abrev_W = TearOff.Abrev
				End If
				Return _Abrev_W
			End Get
		End Property

		Private _Idagencia_W As AggregateParameter = Nothing
		Private _Agencia_W As AggregateParameter = Nothing
		Private _Fechape_W As AggregateParameter = Nothing
		Private _Direccion_W As AggregateParameter = Nothing
		Private _Fecpro_W As AggregateParameter = Nothing
		Private _Iduser_W As AggregateParameter = Nothing
		Private _Hora_W As AggregateParameter = Nothing
		Private _Abrev_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_Idagencia_W = Nothing
		_Agencia_W = Nothing
		_Fechape_W = Nothing
		_Direccion_W = Nothing
		_Fecpro_W = Nothing
		_Iduser_W = Nothing
		_Hora_W = Nothing
		_Abrev_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

	Protected Overrides Function GetInsertCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_AgenciasInsert]" 
	    
		CreateParameters(cmd)
		    
		Return cmd 

  	End Function
	
	Protected Overrides Function GetUpdateCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_AgenciasUpdate]" 
		
		CreateParameters(cmd) 
		    
		Return cmd
	
	End Function	
	
	Protected Overrides Function GetDeleteCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_AgenciasDelete]" 
		
		Dim p As SqlParameter
		p = cmd.Parameters.Add(Parameters.Idagencia)
		p.SourceColumn = ColumnNames.Idagencia
		p.SourceVersion = DataRowVersion.Current

  
		Return cmd
	
	End Function	
	
	Private Sub CreateParameters(ByVal cmd As SqlCommand)
	
		Dim p As SqlParameter
		p = cmd.Parameters.Add(Parameters.Idagencia)
		p.SourceColumn = ColumnNames.Idagencia
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Agencia)
		p.SourceColumn = ColumnNames.Agencia
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Fechape)
		p.SourceColumn = ColumnNames.Fechape
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Direccion)
		p.SourceColumn = ColumnNames.Direccion
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Fecpro)
		p.SourceColumn = ColumnNames.Fecpro
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Iduser)
		p.SourceColumn = ColumnNames.Iduser
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Hora)
		p.SourceColumn = ColumnNames.Hora
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Abrev)
		p.SourceColumn = ColumnNames.Abrev
		p.SourceVersion = DataRowVersion.Current


	End Sub	

End Class

